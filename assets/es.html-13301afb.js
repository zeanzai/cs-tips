import{_ as t,W as o,X as r,Y as l,Z as i,$ as s,a0 as n,C as a}from"./framework-16b96b76.js";const u={},c=n('<h1 id="搜索引擎知识点汇总" tabindex="-1"><a class="header-anchor" href="#搜索引擎知识点汇总" aria-hidden="true">#</a> 搜索引擎知识点汇总</h1><h2 id="第一章" tabindex="-1"><a class="header-anchor" href="#第一章" aria-hidden="true">#</a> 第一章</h2><ul><li>ES与Luence的区别？ <ul><li><strong>功能上</strong>：lunece功能有限，es功能更加强大。lunece只提供了基础的搜索引擎的功能，而es具有更多的企业级功能，如分布式、容错性、实时性等，es还提供了聚合功能，借助一些其他工具，如kinaba还能实现一些统计功能；还提供了一些数据安全方面的功能，如借助x-pack进行用户验证等；</li><li><strong>可编程性</strong>：lunece需要用户拥有Java编程语言，而es使用restful风格的api接口，用户可以借助任何语言来操作es；</li><li><strong>二者联系</strong>： es是基于lunece构建的；</li></ul></li><li>es与mysql的区别？ <ul><li><strong>索引方式</strong>：关系型数据库大多采用的是b-tree的结构，es采用的则是倒排索引；这就导致，对关系型数据库进行count的操作时可能需要秒级服务，而es可能毫秒级就能返回结果，也就是说es近乎实时；倒排索引还能让es支持对结果进行打分排序；</li><li><strong>对事务的支持</strong>：关系型数据库大多支持事务，es不支持事务，也就是说对es的并发请求时，极有可能会丢失某个更新操作；但是es提供了乐观锁的方式，即认定冲突是不会发生的，使用了版本号的概念；</li><li><strong>sql与dsl</strong>： sql能够执行一些较为简单直接的逻辑，es除了能执行较为简单直接的逻辑外，还能够支持文本搜索、地理位置搜索等复杂数据搜索；</li><li><strong>扩展方式</strong>：关系型数据库可能需要借助第三方组建的方式来完成分库分表；而es天生支持扩展，数据本来就可以分片的；</li><li><strong>查询速度</strong>：关系型数据库数据量过大时，查询速度变得很慢；es就是为大量数据的检索而产生的；</li><li><strong>数据的实时性</strong>：关系型数据库存储和查询近乎实时，es数据的写入是准实时的，在内存和磁盘之间增加了一层系统缓存，每隔一段时间就会把内存的数据刷新到系统缓存中，才能够被读到；</li></ul></li><li>es中的基本概念 <ul><li>索引： 就是类似于关系型数据库中的表。</li><li>文档： 类似于关系型数据库概念里面的表里面的一条数据；</li><li>字段： 文档所包含的数据结构的基础构成单位，就是数据的各种属性；</li><li>字段的数据类型： 字符串、文本、数字、ip、经纬度、数组等；</li><li>映射：字段与数据结构的对应关系，es中一旦设定，就不允许修改；</li><li>集群和节点 <ul><li>集群：对外提供相同功能的一组服务器的集合；</li><li>节点：集群中某一台服务器的称谓；</li><li>分布式：把具有不同功能的一组服务器组合到一块，作为一个整体系统统一对外提供服务；</li><li>可用性：系统或服务在某一段时间内，能够对外提供正常服务的时间比例；</li><li>冗余： 也称副本，为了提高可用性的一种手段，即对数据节点或计算节点进行扩展，简单来说就是“堆机器”，一台服务器有宕机风险，那就多台一块搞；</li></ul></li><li>分片： <ul><li>主分片由于单个节点性能有限（计算性能、存储性能），需要把大块的数据分开存储和计算，每一块的数据就是这块数据的分片；分片数量只能设置一次，之后就不能修改，默认是5个分片；</li><li>副分片：为了提高系统的可用性，对数据节点采用的一种冗余的做法，让分片数据多放到几台服务器上，一台挂了，还有另外一台，这样保证数据不会丢失；<strong>一般情况下一块数据的主副分片不会存放到同一台物理主机上；</strong></li><li>与关系型数据库中，主库只提供写服务、从库只提供读服务的方式不同，es中的主副分片都可以对外提供读写服务；</li></ul></li></ul></li><li>es的架构原理 <ul><li>节点的角色： master节点、数据节点、协调节点。 <ul><li>master节点负责维护整个集群的相关工作、管理集群的变更，包括<strong>索引</strong>的创建与删除、节点健康状态监控、节点上下线；</li><li>数据节点主要负责<strong>文档</strong>的存储与检索；</li><li>协调节点则是客户端向es集群发起请求时，es集群就需要找到数据位置，而客户端连接到的那个节点就负责这个工作——检索数据所在的节点位置，并把请求转发给对应的节点，然后把对应节点的响应数据再返回给客户端； <ul><li>原理：协调节点中保存着一份分片-节点路由表，这张表存放着分片与节点的对应关系，协调节点会通过轮训算法对请求进行转发；</li><li>分片的算法：先对用户提交的参数进行hash，然后在对总的分片个数取模，得到的结果就是分片的id；</li><li>分片个数不能变的原因：分片个数发生改变后，分片id就会发生错误，会导致路由表发生混乱，最终导致找不到数据所在的节点；</li></ul></li></ul></li><li>分片数据的高可用原理： 当集群感知到某一块数据的主分片发生故障无法对外提供服务时，集群就会把这块数据的某一个副分片，提升为主分片，然后对外提供服务；当原来的主分片的故障恢复后，现在的主分片就会把发生故障的这段时间内所产生的数据同步到原来的主分片上；</li><li>数据的读写原理： 写原理，当协调节点根据分片算法找到对应的主分片所在的节点后，就会把请求转发给对应的节点，主分片写完数据后，再依次去写自己的副分片，当所有的副分片也写完后，主分片所在的节点会返回协调节点一个成功响应，然后协调节点再把请求成功的响应返回给客户端；</li></ul></li><li>es的应用场景 <ul><li>垂直领域的搜索引擎</li><li>推荐系统</li><li>日志分析</li><li>业务系统中的二级索引： 查询数据时，先从es中查询到数据在关系型数据库中的相关索引字段，然后再拿着这些索引字段去关系型数据库中查询具体的数据；</li></ul></li><li>es的安装与简单使用 <ul><li>单机安装</li><li>集群安装</li><li></li></ul></li></ul>',3),d={href:"https://juejin.cn/post/6844904117580595214#heading-8",target:"_blank",rel:"noopener noreferrer"},h={href:"https://juejin.cn/post/6844904166700105742",target:"_blank",rel:"noopener noreferrer"},p=n("<li><p>什么是全文检索？</p><ol><li>对每一个文章中的每一个词创建索引，指明该词在文章中出现的次数和位置。</li></ol></li><li><p>索引</p><ol><li>一个拥有几分相似特征的文档的集合。索引名称必须是小写字母，类似于关系型数据汇中的database的概念</li></ol></li><li><p>类型</p><ol><li>有点像database中的table的概念</li></ol></li><li><p>一个索引只能创建一个映射（版本6中）</p></li>",4),g=l("p",null,"只有 text 分词，其他的类型都不分词；默认的分词器，standard 标准分词器，对英文是单词分词，对中文是单字分词；",-1),_=l("p",null,"索引库的原理，倒排索引",-1);function f(m,b){const e=a("ExternalLinkIcon");return o(),r("div",null,[c,l("ol",null,[l("li",null,[l("p",null,[l("a",d,[i("https://juejin.cn/post/6844904117580595214#heading-8"),s(e)]),i(" 安装、es中相关概念、kibana的相关操作")])]),l("li",null,[l("p",null,[l("a",h,[i("https://juejin.cn/post/6844904166700105742"),s(e)]),i(" ES的Java客户端的相关操作")])]),p]),g,_])}const k=t(u,[["render",f],["__file","es.html.vue"]]);export{k as default};
