import{_ as t,W as s,X as d,Y as l,Z as i,$ as a,a2 as u,a0 as r,C as h}from"./framework-16b96b76.js";const o="/cs-tips/assets/1726261084594-0455d2a7.png",c="/cs-tips/assets/1726261097717-56cc8791.png",_="/cs-tips/assets/1726261099388-8e8bc043.png",p="/cs-tips/assets/1726261100923-3ec55397.webp",f={},b=l("h1",{id:"数据结构与算法",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#数据结构与算法","aria-hidden":"true"},"#"),i(" 数据结构与算法")],-1),g=l("h2",{id:"_1-如何学习数据结构与算法",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#_1-如何学习数据结构与算法","aria-hidden":"true"},"#"),i(" 1. 如何学习数据结构与算法")],-1),x={href:"https://zhuanlan.zhihu.com/p/137041568",target:"_blank",rel:"noopener noreferrer"},E=r('<h2 id="_2-学习哪些内容" tabindex="-1"><a class="header-anchor" href="#_2-学习哪些内容" aria-hidden="true">#</a> 2. 学习哪些内容</h2><p>基础： 数组、链表、堆、栈、树、图；排序算法、查找算法；</p><p>应用： 堆、栈、队列、B+树、散列表、跳表；LRU算法、限流算法、</p><ul><li>Java中的数据结构与算法</li><li>jvm中的数据结构与算法</li><li>MQ中的数据结构与算法</li><li>Redis中的数据结构与算法</li><li>其他常用算法</li></ul><h2 id="_3-保持算法敏感度" tabindex="-1"><a class="header-anchor" href="#_3-保持算法敏感度" aria-hidden="true">#</a> 3. 保持算法敏感度</h2><p>leetcode刷题</p><h2 id="_4-如何准备面试" tabindex="-1"><a class="header-anchor" href="#_4-如何准备面试" aria-hidden="true">#</a> 4. 如何准备面试</h2><ul><li>应届毕业生及初级程序员</li><li>Java中高级程序员</li></ul><figure><img src="'+o+'" alt="1726261084594.png" tabindex="0" loading="lazy"><figcaption>1726261084594.png</figcaption></figure><h2 id="_5-概述" tabindex="-1"><a class="header-anchor" href="#_5-概述" aria-hidden="true">#</a> 5. 概述</h2><ul><li>数据结构概述 <ul><li>什么是数据结构 <ul><li>数据之间的组织形式</li></ul></li><li>存储结构：在计算机中的实际存储结构 <ul><li>顺序存储结构：数据元素存储的位置是连续的，即两个元素之间没有空白存储空间</li><li>链式存储结构：数据元素存储的位置是离散的，元素与元素之间可能会存在空白存储空间</li><li>两种方式的区别 <ul><li>连续和分散</li><li>查找快与慢</li><li>增删快与慢</li></ul></li></ul></li><li>逻辑结构 <ul><li>集合结构（并行关系）：在一块存储空间中，元素与元素之间的关系时散列的，没有其他关系；</li><li>线性结构（一对一关系）</li><li>树形结构（一对多关系）</li><li>图形结构（多对多关系）</li></ul></li></ul></li><li>算法概述 <ul><li>定义：计算机处理问题的步骤</li><li>特性 <ul><li>输入</li><li>输出</li><li>有穷性：算法的步骤是有限的</li><li>确定性：总能够得到确定的结果</li><li>可行性：在计算机上面是可以运行的</li></ul></li><li>基本要求 <ul><li>正确性：要求所采取的算法的求解结果是正确的</li><li>可读性：对人来说是可以理解的</li><li>健壮性：对错误的输入也能够得到相对应的结果</li><li>时间复杂度：要求所使用的时间尽可能小</li><li>空间复杂度：要求所使用的存储空间尽可能小</li></ul></li><li>备注 <ul><li>算法没有最好的，只有最适合的。</li></ul></li></ul></li><li>研究内容 <ul><li>研究一种数据结构时，我们在研究什么？</li><li>我们在研究： <ul><li>存储在计算机中的逻辑结构</li><li>操作集</li></ul></li></ul></li></ul><h2 id="_6-线性结构-重点" tabindex="-1"><a class="header-anchor" href="#_6-线性结构-重点" aria-hidden="true">#</a> 6. 线性结构（重点）</h2><ul><li>数组 <ul><li>存储图示</li><li>基本使用 <ul><li>创建</li><li>获取长度</li><li>访问元素</li><li>遍历</li><li>修改</li><li>往不可变数组中添加一个元素 <ul><li>需要创建一个原来的数组长度+1长度的新数组</li></ul></li><li>删除 <ul><li>创建一个原来数组长度-1长度的新数组</li></ul></li></ul></li><li>面向对象的数组（创建、删除、修改、增加、显示、遍历等）</li><li>查找算法 <ul><li>线性查找</li><li>二分法查找（BinarySearch）：对已知顺序的数组进行排序</li></ul></li></ul></li><li>栈 <ul><li>存储图示（一个木桶，先进后出）</li><li>操作集 <ul><li>push</li><li>pop</li><li>查看栈顶元素peek</li><li>判断栈是否为空</li></ul></li></ul></li><li>队列 <ul><li>存储图示（先进先出）</li><li>操作集 <ul><li>入队</li><li>出队</li><li>判空</li></ul></li></ul></li><li>单链表 <ul><li>存储图示</li><li>操作集 <ul><li>next</li><li>isLast</li><li>getData</li><li>追加</li><li>删除下一个节点</li><li>插入一个新节点</li></ul></li></ul></li><li>循环链表 <ul><li>存储图示</li><li>操作集 <ul><li>与单链表相似</li></ul></li></ul></li><li>双链表 <ul><li>存储图示</li><li>操作集 <ul><li>after</li></ul></li></ul></li><li>递归 <ul><li>斐波那契数列</li><li>汉诺塔</li></ul></li></ul><h2 id="_7-排序算法" tabindex="-1"><a class="header-anchor" href="#_7-排序算法" aria-hidden="true">#</a> 7. 排序算法</h2><ul><li>概述 <ul><li>算法的优劣 <ul><li>事后统计法</li><li>事前分析估算法</li></ul></li><li>时间复杂度 <ul><li>语句频度：T(n)</li><li>一般情况下，算法中的基本操作语句的重复执行次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n)，使得当n趋近于无限大时，T(n)/f(n)的极限为不等于0的常数，则称f(n)是T(n)的同数量级函数。记作T(n)=O(f(n))，称O(f(n))为算法的渐进时间复杂度，简称时间复杂度。</li><li>平均时间复杂度</li><li>最坏情况时间复杂度（研究重点）</li></ul></li><li>空间复杂度</li></ul></li><li>排序算法 <ul><li>交换排序 <ul><li>冒泡排序</li><li>快速排序 p22</li></ul></li><li>插入排序 <ul><li>直接插入排序</li><li>希尔排序</li></ul></li><li>选择排序 <ul><li>简单选择排序</li><li>堆排序</li></ul></li><li>归并排序</li><li>基数排序</li></ul></li><li>对比</li></ul><h2 id="_8-树结构" tabindex="-1"><a class="header-anchor" href="#_8-树结构" aria-hidden="true">#</a> 8. 树结构</h2>',16),m={href:"https://javaguide.cn/cs-basics/data-structure/tree.html#%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%88%86%E7%B1%BB",target:"_blank",rel:"noopener noreferrer"},B=r('<h2 id="_9-哈希表" tabindex="-1"><a class="header-anchor" href="#_9-哈希表" aria-hidden="true">#</a> 9. 哈希表</h2><h3 id="_9-1-背景" tabindex="-1"><a class="header-anchor" href="#_9-1-背景" aria-hidden="true">#</a> 9.1. 背景</h3><p>早期计算机的存储是连续存储的，查找起来只需要顺序遍历然后一个一个比对即可。但是如果存放的数据没有规律，并且还是按照顺序存储的方式进行存放，这时想要查询一个数据时，压根不知道存放的位置是多少。于是人们就想，能不能根据要存放的内容，设计一种算法，根据算法就可以知道位置？</p><p>于是人们首先想如何让存放的内容跟地址有所绑定呢？此时出现了散列算法以及散列算法的冲突解决算法。</p><p>散列算法以及散列算法的冲突解决算法完美解决了存放内容与地址的绑定关系，但是人们又开始分析：如何解决hash冲突，空间利用率，引入装载因子……</p><p>其他内容：</p><ul><li>扩容与缩容的过程</li><li>散列函数的选择</li><li>装载因子的选择</li></ul><h3 id="_9-2-基本原理" tabindex="-1"><a class="header-anchor" href="#_9-2-基本原理" aria-hidden="true">#</a> 9.2. 基本原理</h3><h4 id="_9-2-1-散列函数——解决长变短的问题" tabindex="-1"><a class="header-anchor" href="#_9-2-1-散列函数——解决长变短的问题" aria-hidden="true">#</a> 9.2.1. 散列函数——解决长变短的问题</h4><p>一些文章介绍散列表的时候，直接贴出一个概念，说散列算法就是将一个数组映射成固定长度的算法。这种说法直接套用了数学的概念，相当于把数学中的函数的概念引了进来。这样说倒也合理。</p><p>那有哪些散列函数呢？</p><ul><li>直接定址法</li><li>数字分析法</li><li>平方取值法</li><li>折叠法</li><li>除留余数法</li><li>随机数法</li><li>……</li></ul><p>这些散列函数都具有两个特点：</p><ul><li>确定性： 对同一个值，散列函数运算多次的结果都是一样的，也就是说同一个值的散列运算结果是确定的；</li><li>不确定性： 对同一个运算结果，对应的原始输入可能有多个，也就是说同一个运算结果，它的原始输入是不确定的；</li></ul><p>这里老王带你体会一个，然后再举一反三，这些散列函数都大差不差，本质都一样。我们拿除留余数法举例。我们先对一块区域进行编号，编号为1到10，现在有1k个数据，那么编号为245的数据应该存放到哪个位置呢？我们就用 245%10 = 5，结果就是编号为245的数据应该存放到地址为编号5的位置。现在又有一个编号为385的数据，那这个数据的存放地址呢？同样是 385%10 = 5，一样存放到地址为编号5的位置。</p><p>上面这个例子中 245%10=5， 不管它运算多少次，结果都是5，这就是它的确定性；而385%10也是等于5的，说明对于同一个运算结果5， 它的原始输入可能不一样，这就是不确定性。</p><p>其实上面这些散列函数都是这样一个效果，具体选择哪一种算法，要看具体的业务场景，具体来分析。而除留余数法是最好理解的，举一反三。</p><p>245 和 385 经过运算之后结果都是5，这就说明有了冲突。那我们应该怎么解决冲突呢，往下看……</p><h4 id="_9-2-2-散列冲突及空间结构-hash冲突-——解决散列冲突的问题" tabindex="-1"><a class="header-anchor" href="#_9-2-2-散列冲突及空间结构-hash冲突-——解决散列冲突的问题" aria-hidden="true">#</a> 9.2.2. 散列冲突及空间结构（Hash冲突）——解决散列冲突的问题</h4><p>散列冲突是指不同的输入经过散列运算后，可能会有同一个输出。目前最常见的是两种：</p><p>一种是开放寻址，说白了，就是先运算出一个地址，如果这个地址上有数据，就往下面一个地址顺移，如果下面一个地址还有数据，那就接着往下顺移……直到找到一个没有数据的位置。这种方式有一个问题，那就是如果这块区域已经满了，就会造成循环寻址的情况。</p><figure><img src="'+c+'" alt="1726261097717.png" tabindex="0" loading="lazy"><figcaption>1726261097717.png</figcaption></figure><p>另一种是拉链法，这种方式是先运算出一个地址，而这个地址并不保存数据，而是保存一个指针或者是引用，这样这个地址上就可以保存多个运算结果一样的数据了。</p><figure><img src="'+_+'" alt="1726261099388.png" tabindex="0" loading="lazy"><figcaption>1726261099388.png</figcaption></figure><h4 id="_9-2-3-hash槽" tabindex="-1"><a class="header-anchor" href="#_9-2-3-hash槽" aria-hidden="true">#</a> 9.2.3. Hash槽</h4><p>Hash槽就是散列表的数组+链表的实现方式中的数组元素所在的位置。可以想象一下HashMap的实现原理： HashMap 的数组部分就是Hash槽，一个Hash槽可以放很多元素，因为这个槽可以拖着一个链表或红黑树。</p><h4 id="_9-2-4-装载因子" tabindex="-1"><a class="header-anchor" href="#_9-2-4-装载因子" aria-hidden="true">#</a> 9.2.4. 装载因子</h4><p>装载因子是散列表的健康状况的指标。装载因子越大，说明存放的数据越多，空闲位置也就越少，散列冲突也就越大，散列表的性能也就越差；相反，装载因子越小，说明空闲位置越少，散列冲突也就越小，散列表的性能也就越好。计算公式如下：</p><p>装载因子 = 存放的数据个数 / 散列表的长度</p><p>装载因子为大于0的数，可以为整数，也可以为小数，也可以大于1。比如拉链法中同一个地址上保存了很多数据，数据个数可能会远远大于散列表的长度。</p><h4 id="_9-2-5-扩容与缩容" tabindex="-1"><a class="header-anchor" href="#_9-2-5-扩容与缩容" aria-hidden="true">#</a> 9.2.5. 扩容与缩容</h4>',31),k=l("h3",{id:"_9-3-应用场景",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#_9-3-应用场景","aria-hidden":"true"},"#"),i(" 9.3. 应用场景")],-1),H=l("ul",null,[l("li",null,"Java中的HashMap类"),l("li",null,"Redis中的字典数据结构")],-1),A=l("h3",{id:"_9-4-参考",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#_9-4-参考","aria-hidden":"true"},"#"),i(" 9.4. 参考")],-1),v={href:"https://www.laoyu.site/2018/%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/redis/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E5%AD%97%E5%85%B8/",target:"_blank",rel:"noopener noreferrer"},w=l("li",null,"java集合面试题52道.pdf",-1),R=r('<h2 id="_10-图" tabindex="-1"><a class="header-anchor" href="#_10-图" aria-hidden="true">#</a> 10. 图</h2><h2 id="_11-b-树" tabindex="-1"><a class="header-anchor" href="#_11-b-树" aria-hidden="true">#</a> 11. B+树</h2><h2 id="_12-红黑树" tabindex="-1"><a class="header-anchor" href="#_12-红黑树" aria-hidden="true">#</a> 12. 红黑树</h2><h2 id="_13-令牌桶算法" tabindex="-1"><a class="header-anchor" href="#_13-令牌桶算法" aria-hidden="true">#</a> 13. 令牌桶算法</h2>',4),z={href:"https://mp.weixin.qq.com/s/HQHAbatTZPs8iHBCHkFOTw",target:"_blank",rel:"noopener noreferrer"},T=l("h2",{id:"_14-lru算法",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#_14-lru算法","aria-hidden":"true"},"#"),i(" 14. LRU算法")],-1),C=l("h2",{id:"_15-其他",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#_15-其他","aria-hidden":"true"},"#"),i(" 15. 其他")],-1),L={href:"https://zhuanlan.zhihu.com/p/137041568",target:"_blank",rel:"noopener noreferrer"},y=l("p",null,"一个算法培训课程的目录，可以用作算法的学习路线",-1),M=l("figure",null,[l("img",{src:p,alt:"1726261100923.webp",tabindex:"0",loading:"lazy"}),l("figcaption",null,"1726261100923.webp")],-1);function j(F,N){const e=h("ExternalLinkIcon"),n=h("RouterLink");return s(),d("div",null,[b,g,l("ul",null,[l("li",null,[l("a",x,[i("如何系统地学习数据结构与算法？"),a(e)])])]),E,l("ul",null,[l("li",null,[l("a",m,[i("树"),a(e)])])]),B,l("p",null,[i("在实际使用过程时，散列表的长度并不是一成不变的。这就涉及到扩容和缩容，而只要扩容或缩容，就一定涉及到重新计算地址的过程。在jdk中的HashMap和Redis集群中增删节点信息等都涉及到散列表的扩容和缩容，实际上，分布式应用系统中，散列表也是支持高可扩展性的一种常见的数据结构。关于分布式中一致性hash算法，可以参考老王的另一篇"),a(n,{to:"/01-notes/01-CS%E5%9F%BA%E7%A1%80/distribute/hash.html"},{default:u(()=>[i("文章")]),_:1}),i("。")]),k,H,A,l("ul",null,[l("li",null,[l("a",v,[i("Redis数据结构——字典"),a(e)])]),w]),R,l("ul",null,[l("li",null,[l("a",z,[i("5种限流算法，7种限流方式，挡住突发流量？"),a(e)])])]),T,C,l("ul",null,[l("li",null,[l("a",L,[i("如何系统地学习数据结构与算法？"),a(e)])])]),y,M])}const D=t(f,[["render",j],["__file","dsa.html.vue"]]);export{D as default};
